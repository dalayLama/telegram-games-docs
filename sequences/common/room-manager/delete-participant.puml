@startuml

actor "Actor" as a #LightYellow
participant "RoomController" as controller #LightGray
participant "RoomService" as roomService #LightGray
participant "RoomDAO" as roomDao #LightGray
queue Kafka as kafka #LightPink

a -> controller: DELETE /rooms/{roomId}/participant/{participantId}
note right a
Request Header:
    "Authorization": "Bearer {token}"
Path variables:
    "roomId" - UUID
    "participantId" - UUID
end note
activate controller

controller -> roomService: deleteParticipant(roomId, participantId)
note right controller
end note
activate roomService

roomService -> roomDao: findById(roomId)
activate roomDao
roomDao --> roomService: return Room
deactivate roomDao

alt #LightCoral Room not found
    roomService --> controller: RoomNotFoundException
    controller --> a
    note left controller
    Http status: 404
    {
        errorCode: "ROOM_NOT_FOUND",
        errorMessage: "Room hasn't been found by id - {:id}"
    }
    end note
end

roomService -> roomService: check the actor is the owner of the room, or, the participant itself

alt #LightCoral the Actor is not the owner or is not the participant itself
    roomService --> controller: ForbiddenOperationException
    controller --> a
    note left controller
    Http status: 403
    {
        errorCode: "FORBIDDEN_OPERATION",
        errorMessage: "The user doesn't have permission to process the operation"
    }
    end note
end

roomService -> roomService: delete participant by ID

roomService -> roomDao: save(room)
activate roomDao
roomDao --> roomService
deactivate roomDao

par #LightBlue
    roomService -> kafka: /rooms-topic
    note right roomService
    messageKey: PARTICIPANT_DELETED
    DeletedParticipantDTO
    {
        UUID roomId,
        UUID participant
    }
    end note
end

roomService --> controller
deactivate roomService

controller --> a
note left controller
Http status: 200
end note
deactivate controller

@enduml